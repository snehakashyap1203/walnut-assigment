var dijkstra = require('node-dijkstra');
var clone = require('clone');

module.exports = function(roads) {

  var costs = getCostsLookup(roads);
  
  return function(from, to) {

    var graph; 
    var path; 
    var cost;
    var betweenStart;
    var betweenEnd;
    var betweenLocation;
    var tempName;

    // is a basic lookup
    if(typeof from === 'string') {

      graph = new dijkstra(costs);
      path = from !== to ? graph.shortestPath(from, to) : [ from ];

      if(path) {
        cost = getPathCost(path, costs);
      }
    // is an inbetween lookup
    } else {

      betweenStart = from.from;
      betweenEnd = from.to;
      betweenLocation = from.location;

      tempName = from.from + '_' + from.to;

      costs[ tempName ] = {};
      costs[ tempName ][ betweenStart ] = betweenLocation;
      costs[ tempName ][ betweenEnd ] = costs[ betweenStart ][ betweenEnd ] - betweenLocation;

      graph = new dijkstra(costs);
      path = from !== to ? graph.shortestPath(tempName, to) : [ from ];

      if(path) {
        cost = getPathCost(path, costs);
        path.shift();
      }

      delete costs[ tempName ];
    }

    if(path) {

      return {
        duration: cost,
        path: path
      };
    } else {

      return null;
    }
  };
};

function getCostsLookup(roads) {
  var costs = {};

  roads.forEach(function(road) {

    road.forEach( function(node, i) {

      // i < 2 because the last index is cost/duration
      if(i < 2 && !costs[ node ]) {
        costs[ node ] = {};
      }
    });

    costs[ road[ 0 ] ][ road[ 1 ] ] = road[ 2 ]; 
  });

  return costs;
}

function getPathCost(path, costs) {

  var total = 0;

  for(var i = 1; i < path.length; i++) {
    total += costs[ path[ i - 1 ] ][ path[ i ] ];
  }

  return total;
}